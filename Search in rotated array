class Solution
{
    int search(int arr[], int l, int h, int k)
    {
        // l: The starting index
        // h: The ending index, you have to search the key in this range
        // Complete this function
        
      int ans=0;
      while(h>=l)
      {
          int mid=l+(h-l)/2;
          if( (mid==0||mid==arr.length-1)||(arr[mid]<arr[mid-1]&&arr[mid]<arr[mid+1]))
             ans=mid;
          if(arr[mid]>arr[arr.length-1])
          {
              l=mid+1;
          }
          else{
              h=mid-1;
          }
      }
      int start=0;
      int end=ans-1;
      int ans1=left_half(arr,0,ans-1,k);
     int ans2=right_half(arr,ans,arr.length-1,k);
     if(ans1==-1&&ans2==-1)
      return -1;
      
      return Math.max(ans1,ans2);
   
      
      
    }
    public int left_half(int []arr,int l,int h,int k)
    {
      if(l<=h)
      {
        
            int mid=l+(h-l)/2;
            if(arr[mid]==k)
            return mid;
            if(arr[mid]<k)
            {
               return left_half(arr,mid+1,h,k);
            }
            else{
               return left_half(arr,l,mid-1,k);
            }
        }
        return -1;
    }
    
      public int right_half(int []arr,int l,int h,int k)
    {
        int ans=-1;
        while(h>=l)
        {
            int mid=l+(h-l)/2;
            if(arr[mid]==k)
            ans=mid;
            
            if(arr[mid]<k)
            {
                l=mid+1;
            }
            else{
                h=mid-1;
            }
        }
        return ans;
    }

    
}
