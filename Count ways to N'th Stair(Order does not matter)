Type1:There are N points on the road ,you can step ahead by 1 or 2 . Find the number of ways you can reach at point N. 

Example 1:

Input: N = 4
Output: 5
Explanation: Three ways to reach at 4th
point. They are {1, 1, 1, 1}, {1, 1, 2},
{1, 2, 1} {2, 1, 1}, {2, 2}.

Example 2:

Input: N = 5
Output: 8
Explanation: Three ways to reach at 5th
point. They are {1, 1, 1, 1, 1},
{1, 1, 1, 2}, {1, 1, 2, 1}, {1, 2, 1, 1},
{2, 1, 1, 1}{1, 2, 2}, {2, 1, 2}, {2, 2, 1}

Your Task:
You don't need to read or print anyhting. Your task is to complete the function nthPoint() which takes N as input parameter and returns the total number of ways modulo 109 + 7 to reach at Nth point.

Expected Time Complexity: O(N)
Expected Space Complexity: O(N)

Constraints:
1 ≤ N ≤ 104

//code:
//User function Template for Java

class Solution
{
    public int nthPoint(int n)
    {
        // Code here
        if(n==1||n==2)
        return n;
        int dp[]=new int [n+1];
        int mod=1000000007;
        dp[0]=0;
        dp[1]=1;
        dp[2]=2;
        for(int i=3;i<=n;i++)
        {
            dp[i]=(dp[i-1]+dp[i-2])%mod;
        }
        return dp[n]%mod;
    }
}


Type:2
Count ways to N'th Stair(Order does not matter)
MediumAccuracy: 50.49%Submissions: 41K+Points: 4
Join the most popular course on DSA. Master Skills & Become Employable by enrolling today! 
There are N stairs, and a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time. Count the number of ways, the person can reach the top (order does not matter).

Note:
Order does not matter means for n = 4 {1 2 1},{2 1 1},{1 1 2} are considered same.
 

Example 1:

Input: N = 4
Output: 3
Explanation: Three ways to reach at 4th stair.
They are {1, 1, 1, 1}, {1, 1, 2}, {2, 2}.
Example 2:

Input: N = 5
Output: 3
Explanation: Three ways to reach at 5th stair.
They are {1, 1, 1, 1, 1}, {1, 1, 2, 1} and
{1, 2, 2}.

Your Task:
You don't need to read or print anyhting. Your task is to complete the function nthStair() which takes N as input parameter and returns the total number of ways to reach at Nth stair.
 

Expected Time Complexity: O(N)
Expected Space Complexity: O(N)
 

Constraints:
1 ≤ N ≤ 104

Code:
1.Dynamic programming approach:
The given code is a solution to the problem of counting the number of ways a person can climb N stairs when they can take either 1 or 2 stairs at a time. It uses dynamic programming to solve this problem efficiently.

Let's break down how this code works:

public long nthStair(int n) {
    int[] DP = new int[n + 1];
    DP[0] = 1;  // Base case: There is one way to climb 0 stairs (no need to climb).
    DP[1] = 1;  // Base case: There is one way to climb 1 stair (take 1 step).

    for (int i = 2; i <= n; i++) {
        if (i == 2) {
            DP[i] = 2;  // Special case: There are two ways to climb 2 stairs (1+1 or 2).
        } else if (i % 2 == 0) {
            DP[i] = DP[i - 1] + 1;  // If i is even, add 1 to the previous step count.
        } else {
            DP[i] = DP[i - 1];  // If i is odd, keep the same step count as the previous step.
        }
    }
    return DP[n];  // Return the number of ways to climb N stairs.
}

2. greedy approach
/*Easiest code in java contact rakeshmehta03103@gmail.com for any query*/


class Solution
{
    public long nthStair(int n)
    {
        // Code here
                // Code here
long ans=0;
if(n%2==0)
{
    ans=n/2+1;
}
else{
    ans=n/2+1;
}
return ans;
    }
}

//Time complexity=O(1)

//Space Complexity=O(1)
